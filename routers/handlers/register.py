# from aiogram import Router, F, types
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.context import FSMContext
# from aiogram.types import (
#     CallbackQuery, 
#     InlineKeyboardButton, 
#     InlineKeyboardMarkup, 
#     InputMediaPhoto, 
#     FSInputFile
# )

# from functions.func import get_branches, post_request_register, get_address

# router = Router()


# class GetService(StatesGroup):
#     name = State()
#     number = State()
#     city = State()
#     branch = State()

# @router.callback_query(F.data == "register_user")
# async def register_user(callback: CallbackQuery, state: FSMContext):
#     """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è."""
#     await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#     await state.set_state(GetService.name)

# @router.message(GetService.name)
# async def get_name(message: types.Message, state: FSMContext):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
#     await state.update_data(name=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
#     await state.set_state(GetService.number)

# @router.message(GetService.number)
# async def get_number(message: types.Message, state: FSMContext):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥."""
#     await state.update_data(number=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:")
#     await state.set_state(GetService.city)

# @router.message(GetService.city)
# async def get_city(message: types.Message, state: FSMContext):
#     """–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
#     await state.update_data(city=message.text)

#     branches = await get_branches()
#     # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª–∏–∞–ª–æ–≤ –≤ state, —á—Ç–æ–±—ã –ø–æ–∑–¥–Ω–µ–µ –ø–æ ID –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π
#     await state.update_data(branches=branches)

#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
#     keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [
#                 InlineKeyboardButton(
#                     text=f"{branch['name']} ({branch['address']})",
#                     callback_data=f"branch_id_{branch['id']}"
#                 )
#             ]
#             for branch in branches
#         ]
#     )

#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=keyboard)
#     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ branch –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
#     await state.set_state(GetService.branch)

# @router.callback_query(GetService.branch, F.data.startswith("branch_id_"))
# async def get_branch(callback: CallbackQuery, state: FSMContext):
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª–∏–∞–ª–∞ –∫–Ω–æ–ø–∫–æ–π.
#     –°–æ—Ö—Ä–∞–Ω—è–µ–º branch_id, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" / "–ò–∑–º–µ–Ω–∏—Ç—å".
#     """
#     user_data = await state.get_data()
#     branches = user_data.get("branches", [])

#     # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ñ–∏–ª–∏–∞–ª–∞ –∏–∑ callback_data (—Ñ–æ—Ä–º–∞—Ç "branch_id_{id}")
#     branch_id_str = callback.data.split("branch_id_")[-1]
#     branch_id = int(branch_id_str)

#     # –ò—â–µ–º –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ —Ñ–∏–ª–∏–∞–ª–æ–≤ –Ω—É–∂–Ω—ã–π
#     selected_branch = next((b for b in branches if b["id"] == branch_id), None)

#     # –ï—Å–ª–∏ —Ñ–∏–ª–∏–∞–ª –Ω–∞–π–¥–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
#     if selected_branch:
#         await state.update_data(branch_id=branch_id, branch_name=selected_branch["name"])

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ç–æ–≥–æ–º
#     user_data = await state.get_data()
#     name = user_data['name']
#     number = user_data['number']
#     city = user_data['city']
#     branch_name = user_data.get('branch_name', '–ù–µ –≤—ã–±—Ä–∞–Ω')

#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_data")],
#         [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change")]
#     ])

#     msg = (
#         f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
#         f"–§–ò–û: {name}\n"
#         f"–ù–æ–º–µ—Ä: {number}\n"
#         f"–ì–æ—Ä–æ–¥: {city}\n"
#         f"–§–∏–ª–∏–∞–ª: {branch_name}\n\n"
#         f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'."
#     )

#     await callback.message.edit_text(text=msg, reply_markup=keyboard)

# @router.callback_query(F.data == "change")
# async def change_data(callback: CallbackQuery, state: FSMContext):
#     """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞–µ–º –≤—Å—ë –∑–∞–Ω–æ–≤–æ."""
#     await state.clear()
#     await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
#     await state.set_state(GetService.name)

# @router.callback_query(F.data == "save_data")
# async def save_user_data(callback: CallbackQuery, state: FSMContext):
#     """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î/CRM –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
#     telegram_chat_id = callback.message.chat.id

#     data = await state.get_data()
#     name = data['name']
#     number = data['number']
#     city = data['city']
#     branch_id = data.get('branch_id', 0)  # 0 –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–µ—Ñ–æ–ª—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

#     # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
#     payload = {
#         "name": name,
#         "number": number,
#         "city": city,
#         "telegram_chat_id": str(telegram_chat_id),
#         "branch_id": branch_id
#     }

#     response = await post_request_register(data=payload)
    
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     formatted_response = (
#         f"üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
#         f"üë§ –§–ò–û: {response['name']}\n"
#         f"üåç –ì–æ—Ä–æ–¥: {response['city']}\n"
#         f"üìû –ù–æ–º–µ—Ä: {response['number']}\n\n"
#         f"ü™™ –ö–æ–¥: {response['code']}\n"
#     )

#     kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

#     # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–Ω–æ–ø–∫–∞–º–∏) –Ω–∞ –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
#     await callback.message.edit_text(formatted_response)

#     address = await get_address()

#     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
#     info = (
#         f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:\n\n"
#         f"<code>{address['name1']}{response['code']}\n\n"
#         f"{address['name2']}\n\n"
#         f"{address['name3']}{response['code']}</code>"
#     )

#     photo_filenames = [
#         "./images/taobao.jpg", 
#         "./images/pinduoduo.jpg", 
#         "./images/poizon.jpg", 
#         "./images/1688.jpg"
#     ]
#     media_group = [InputMediaPhoto(media=FSInputFile(filename)) for filename in photo_filenames]

#     # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     await state.clear()

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
#     await callback.message.answer(info, reply_markup=keyboard, parse_mode="HTML")

#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≥—Ä—É–ø–ø–æ–π
#     await callback.message.bot.send_media_group(
#         chat_id=callback.message.chat.id, 
#         media=media_group
#     )
