from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import redis.asyncio as redis
import logging

from conf.config import ADMIN_CHAT_ID, REDIS_HOST, REDIS_PASSWORD, REDIS_PORT, REDIS_USERNAME, TOKEN
from functions.func import get_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()
bot = Bot(token=TOKEN)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

class SupportState(StatesGroup):
    waiting_for_message = State()
    in_dialogue = State()

async def safe_redis_operation(operation, *args, **kwargs):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å Redis —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        result = await operation(*args, **kwargs)
        logger.info(f"Redis operation {operation.__name__} with args {args} returned {result}")
        return result
    except redis.ConnectionError as e:
        logger.error(f"Redis connection error: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected Redis error: {e}")
        return None

@router.message(F.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_message(message: Message, state: FSMContext):
    whatsapp = await get_text(key="whatsapp")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="WhatsApp", url=f"{whatsapp}")],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ Telegram", callback_data="start_support")]
    ])
    await message.answer("üì© –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:", reply_markup=kb)
    await state.set_state(SupportState.waiting_for_message)

@router.callback_query(F.data == "start_support")
async def support_start_support(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.")
    await state.set_state(SupportState.waiting_for_message)
    await cb.answer()

@router.message(SupportState.waiting_for_message, F.chat.type == "private")
async def message_forward_to_admin_topic(message: Message, state: FSMContext):
    try:
        topic = await bot.create_forum_topic(
            chat_id=ADMIN_CHAT_ID,
            name=f"Ticket[{message.from_user.id}]: {message.from_user.full_name}"
        )
        thread_id = topic.message_thread_id

        forwarded = await bot.forward_message(
            chat_id=ADMIN_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id,
            message_thread_id=thread_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ Redis
        result = await safe_redis_operation(
            redis_client.set, f"ticket:{thread_id}", message.from_user.id
        )
        if result is None:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await state.update_data(thread_id=thread_id)
        await state.set_state(SupportState.in_dialogue)

        await message.reply("‚úÖ –¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏–ª–∏ /close –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=thread_id,
            text="üì© –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –æ—Ç–∫—Ä—ã—Ç.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"admin_close_{thread_id}")]
            ])
        )
    except Exception as e:
        logger.error(f"Error in message_forward_to_admin_topic: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(SupportState.in_dialogue, F.chat.type == "private", F.text != "/close")
async def reply_to_admin(message: Message, state: FSMContext):
    user_data = await state.get_data()
    thread_id = user_data.get('thread_id')
    
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    if not user_id:
        await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.")
        await state.clear()
        return

    await bot.forward_message(
        chat_id=ADMIN_CHAT_ID,
        from_chat_id=message.chat.id,
        message_id=message.message_id,
        message_thread_id=thread_id
    )

@router.message(SupportState.in_dialogue, F.chat.type == "private", F.text == "/close")
async def user_close_ticket(message: Message, state: FSMContext):
    user_data = await state.get_data()
    thread_id = user_data.get('thread_id')
    
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    if not user_id:
        await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.")
        await state.clear()
        return

    await bot.close_forum_topic(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=thread_id
    )
    
    await bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=thread_id,
        text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {message.from_user.id}) –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç."
    )
    
    await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
    
    await message.reply("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    await state.clear()

@router.callback_query(F.data.startswith("admin_close_"))
async def admin_close_ticket_button(cb: CallbackQuery):
    thread_id = int(cb.data.split("_")[2])
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    
    if not user_id:
        await cb.message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await cb.answer()
        return

    await bot.close_forum_topic(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=thread_id
    )
    
    await bot.send_message(
        user_id,
        "‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
    
    await cb.message.reply("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
    await cb.answer()

@router.message(F.chat.id == ADMIN_CHAT_ID, F.message_thread_id, ~F.text.startswith("/close"))
async def admin_reply_in_topic(message: Message, state: FSMContext):
    thread_id = message.message_thread_id
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    if not user_id:
        logger.info(f"No user_id found for thread_id {thread_id}")
        return

    logger.info(f"Processing admin message in thread {thread_id}, content_type={message.content_type}")
    if message.text:
        await bot.send_message(
            user_id,
            message.text
        )
    elif message.photo:
        await bot.send_photo(
            user_id,
            photo=message.photo[-1].file_id,
            caption=message.caption
        )
    elif message.document:
        await bot.send_document(
            user_id,
            document=message.document.file_id,
            caption=message.caption
        )
    else:
        logger.info(f"Unsupported content type {message.content_type} in thread {thread_id}")

@router.message(F.chat.id == ADMIN_CHAT_ID, F.text.startswith("/close"))
async def admin_close_ticket_command(message: Message):
    thread_id = message.message_thread_id
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    
    if not user_id:
        await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await bot.close_forum_topic(
        chat_id=ADMIN_CHAT_ID,
        message_thread_id=thread_id
    )
    
    await bot.send_message(
        user_id,
        "‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )
    
    await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
    
    await message.reply("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç.")