from aiogram import Router, types, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from functions.func import get_product_on_product_code

router = Router()

class SearchProductState(StatesGroup):
    waiting_for_product_code = State()

@router.message(F.text == "üîé –ü–æ–∏—Å–∫")
async def start_search(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ç—Ä–µ–∫ –∫–æ–¥—É", callback_data="search_product_code")]
    ])
    await message.answer("–ü–æ–∏—Å–∫ –ø–æ:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É
@router.callback_query(F.data == "search_product_code")
async def search_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(SearchProductState.waiting_for_product_code)


@router.message(SearchProductState.waiting_for_product_code)
async def process_product_code(message: Message, state: FSMContext, bot: Bot):
    product_code = message.text

    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `get_product_on_product_code` - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø–æ —Ç—Ä–µ–∫-–∫–æ–¥—É
        response = await get_product_on_product_code(product_code=product_code)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response or 'status' not in response:
            await message.answer("–¢–æ–≤–∞—Ä —Å –¥–∞–Ω–Ω—ã–º —Ç—Ä–µ–∫-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            data = response

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
            if data['status'] == "–í –∫–∏—Ç–∞–µ":
                info_china = (
                    f"üá®üá≥ üá®üá≥ üá®üá≥\n\n"
                    f"–¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –ö–∏—Ç–∞–π\n\n"
                    f"–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: {data['product_code']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {data['status']}\n"
                    f"–î–∞—Ç–∞: {data['date']}\n"
                )
                await message.answer(info_china)

            elif data['status'] == "–í –ø—É—Ç–∏":
                info_transit = (
                    f"üöö üöö üöö\n\n"
                    f"–¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏\n\n"
                    f"–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: {data['product_code']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {data['status']}\n"
                    f"–î–∞—Ç–∞: {data['date']}\n"
                )
                await message.answer(info_transit)

            elif data['status'] == "–ú–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å":
                info_bishkek = (
                    f"üì¨ üì¨ üì¨\n\n"
                    f"–¢–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥–µ –ë–∏—à–∫–µ–∫\n\n"
                    f"–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä: {data['product_code']}\n"
                    f"–°—Ç–∞—Ç—É—Å: {data['status']}\n"
                    f"–î–∞—Ç–∞: {data['date']}\n"
                    f"–í–µ—Å: {data['weight']} –∫–≥\n"
                    f"–¶–µ–Ω–∞: {data['price']} —Å–æ–º\n"
                )
                await message.answer(info_bishkek)

            else:
                await message.answer("–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫-–∫–æ–¥–∞: {str(e)}")
    finally:
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

