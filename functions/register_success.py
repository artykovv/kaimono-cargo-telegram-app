from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramBadRequest
import redis.asyncio as redis
import logging

from functions.func import get_address, get_profile_user
from conf.config import ADMIN_CHAT_ID, REDIS_HOST, REDIS_PASSWORD, REDIS_PORT, REDIS_USERNAME, TOKEN

# Configure logging
logger = logging.getLogger(__name__)

router = Router()
bot = Bot(token=TOKEN)


# Redis configuration
redis_client = redis.Redis(
    host=REDIS_HOST,
    port=REDIS_PORT,
    username=REDIS_USERNAME,
    password=REDIS_PASSWORD,
    decode_responses=True
)

async def safe_redis_operation(operation, *args, **kwargs):
    """Wrapper for Redis operations with error handling."""
    try:
        result = await operation(*args, **kwargs)
        logger.info(f"Redis operation {operation.__name__} with args {args} returned {result}")
        return result
    except redis.ConnectionError as e:
        logger.error(f"Redis connection error: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected Redis error: {e}")
        return None

async def forward_content_to_admin(message: Message, chat_id: int, thread_id: int, user_id: str, caption_prefix: str = ""):
    """Helper function to forward user content to admin thread."""
    try:
        caption = f"{caption_prefix}{message.caption or ''}".strip()
        if message.text:
            await bot.send_message(
                chat_id=chat_id,
                message_thread_id=thread_id,
                text=message.text
            )
        elif message.photo:
            await bot.send_photo(
                chat_id=chat_id,
                message_thread_id=thread_id,
                photo=message.photo[-1].file_id,
                caption=caption
            )
        elif message.document:
            await bot.send_document(
                chat_id=chat_id,
                message_thread_id=thread_id,
                document=message.document.file_id,
                caption=caption
            )
        elif message.video:
            await bot.send_video(
                chat_id=chat_id,
                message_thread_id=thread_id,
                video=message.video.file_id,
                caption=caption
            )
        elif message.voice:
            await bot.send_voice(
                chat_id=chat_id,
                message_thread_id=thread_id,
                voice=message.voice.file_id,
                caption=caption
            )
        elif message.sticker:
            await bot.send_sticker(
                chat_id=chat_id,
                message_thread_id=thread_id,
                sticker=message.sticker.file_id
            )
        elif message.animation:
            await bot.send_animation(
                chat_id=chat_id,
                message_thread_id=thread_id,
                animation=message.animation.file_id,
                caption=caption
            )
        else:
            logger.info(f"Unsupported content type {message.content_type} from user {user_id}")
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
            return False
        logger.info(f"User {user_id} message sent to thread {thread_id}")
        return True
    except TelegramBadRequest as e:
        logger.error(f"Error forwarding user {user_id} message to thread {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.")
        return False
    except Exception as e:
        logger.error(f"Unexpected error forwarding user {user_id} message to thread {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.")
        return False

class AddressCheckState(StatesGroup):
    waiting_for_screenshot = State()
    in_dialogue = State()


@router.callback_query(F.data == "get_instruction")
async def get_instruction(cb: CallbackQuery):
    """Handle instruction button callback."""
    try:
        instruction_message = (
            "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥—Ä–µ—Å–∞:\n\n"
            "1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n"
            "2. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∞–¥—Ä–µ—Å.\n"
            "3. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
            "4. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ WhatsApp –∏–ª–∏ Telegram."
        )
        await cb.message.answer(instruction_message, parse_mode="HTML")
        await cb.answer()
    except TelegramBadRequest as e:
        logger.error(f"Error sending instruction: {e}")
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await cb.answer()

@router.callback_query(F.data == "start_screenshot_check")
async def start_screenshot_check(cb: CallbackQuery, state: FSMContext):
    """Initiate screenshot submission for address verification."""
    try:
        await cb.message.answer("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞.")
        await state.set_state(AddressCheckState.waiting_for_screenshot)
        await state.update_data(user_name=cb.from_user.full_name, user_id=str(cb.from_user.id))
        await cb.answer()
    except TelegramBadRequest as e:
        logger.error(f"Error in start_screenshot_check: {e}")
        await cb.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await cb.answer()

@router.message(AddressCheckState.waiting_for_screenshot)
async def process_screenshot(message: Message, state: FSMContext):
    """Process user-submitted content and create admin ticket."""
    try:
        user_data = await state.get_data()
        user_name = user_data.get("user_name")
        user_id = user_data.get("user_id")

        response = await get_profile_user(telegram_chat_id=user_id)
        if not response:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        user_profile = response[0]

        address = await get_address(telegram_chat_id=user_id)
        if not address:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        topic = await bot.create_forum_topic(
            chat_id=ADMIN_CHAT_ID,
            name=f"AddressCheck[{user_id}]: {user_name}"
        )
        thread_id = topic.message_thread_id

        ticket_info = (
            f"üìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üë§ –§–ò–û: {user_profile['name']}\n"
            f"üåç –ì–æ—Ä–æ–¥: {user_profile['city']}\n"
            f"üìû –ù–æ–º–µ—Ä: {user_profile['number']}\n\n"
            f"ü™™ –ö–æ–¥: KBK{user_profile['numeric_code']}\n\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
            f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ—Ç –î–∏–∞–ª–æ–≥ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ."
        )
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=thread_id,
            text=ticket_info,
            parse_mode="HTML"
        )

        # Forward the user's content to the admin thread
        success = await forward_content_to_admin(
            message=message,
            chat_id=ADMIN_CHAT_ID,
            thread_id=thread_id,
            user_id=user_id,
            caption_prefix="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "
        )
        if not success:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=thread_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            )
            await state.clear()
            return

        # Add closure button only if content was forwarded successfully
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=thread_id,
            text="üîò –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å –î–∏–∞–ª–æ–≥", callback_data=f"admin_close_{thread_id}")]
            ])
        )

        result = await safe_redis_operation(
            redis_client.set, f"ticket:{thread_id}", user_id, ex=86400
        )
        if result is None:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                message_thread_id=thread_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –î–∏–∞–ª–æ–≥–∞ –≤ Redis."
            )
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –î–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        await message.reply(
            "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
        )
        await state.set_state(AddressCheckState.in_dialogue)
        await state.update_data(thread_id=thread_id)

    except Exception as e:
        logger.error(f"Error processing content for user {message.from_user.id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.message(AddressCheckState.in_dialogue, F.chat.type == "private", F.text != "/close")
async def user_reply_to_admin(message: Message, state: FSMContext):
    """Handle user messages in the dialogue state."""
    user_data = await state.get_data()
    thread_id = user_data.get("thread_id")
    
    if not thread_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    if not user_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.")
        await state.clear()
        return

    await forward_content_to_admin(
        message=message,
        chat_id=ADMIN_CHAT_ID,
        thread_id=thread_id,
        user_id=user_id
    )

@router.message(AddressCheckState.in_dialogue, F.chat.type == "private", F.text == "/close")
async def user_close_ticket(message: Message, state: FSMContext):
    """Handle user-initiated ticket closure."""
    user_data = await state.get_data()
    thread_id = user_data.get("thread_id")
    
    if not thread_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    if not user_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç.")
        await state.clear()
        return

    try:
        try:
            await bot.close_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        except TelegramBadRequest as e:
            if "TOPIC_DELETED" in str(e):
                logger.warning(f"Topic {thread_id} already deleted or closed.")
            else:
                raise e

        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            message_thread_id=thread_id,
            text=f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} (ID: {user_id}) –∑–∞–∫—Ä—ã–ª –î–∏–∞–ª–æ–≥."
        )
        await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
        await message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.")
        await state.clear()
    except TelegramBadRequest as e:
        logger.error(f"Error closing ticket {thread_id} by user {user_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")
        await state.clear()
    except Exception as e:
        logger.error(f"Unexpected error closing ticket {thread_id} by user {user_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")
        await state.clear()

@router.callback_query(F.data.startswith("admin_close_"))
async def admin_close_ticket_button(cb: CallbackQuery, state: FSMContext):
    """Handle ticket closure via button."""
    thread_id = int(cb.data.split("_")[2])
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    
    if not user_id:
        await cb.message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        await cb.answer()
        return

    try:
        try:
            topic_info = await bot.get_forum_topic_icon_stickers(chat_id=ADMIN_CHAT_ID)
            await bot.close_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        except TelegramBadRequest as e:
            if "TOPIC_DELETED" in str(e):
                logger.warning(f"Topic {thread_id} already deleted or closed.")
            else:
                raise e

        await bot.send_message(user_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
        await cb.message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # Clear user's FSM state
        await state.clear()
        await cb.answer()
    except TelegramBadRequest as e:
        logger.error(f"Error closing ticket {thread_id}: {e}")
        await cb.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")
        await cb.answer()
    except Exception as e:
        logger.error(f"Unexpected error closing ticket {thread_id}: {e}")
        await cb.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")
        await cb.answer()

@router.message(F.chat.id == ADMIN_CHAT_ID, F.message_thread_id)
async def admin_reply_in_topic(message: Message):
    """Handle admin replies in ticket threads."""
    logger.info(
        f"Admin message received: chat_id={message.chat.id}, "
        f"thread_id={message.message_thread_id}, content_type={message.content_type}, "
        f"text={message.text if message.text else 'None'}"
    )
    
    if message.text and message.text.startswith(("/close", "/approve")):
        return

    user_id = await safe_redis_operation(redis_client.get, f"ticket:{message.message_thread_id}")
    if not user_id:
        logger.warning(f"No user_id found for thread_id {message.message_thread_id}")
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        return

    try:
        if message.text:
            await bot.send_message(user_id, message.text)
        elif message.photo:
            await bot.send_photo(user_id, photo=message.photo[-1].file_id, caption=message.caption)
        elif message.document:
            await bot.send_document(user_id, document=message.document.file_id, caption=message.caption)
        elif message.video:
            await bot.send_video(user_id, video=message.video.file_id, caption=message.caption)
        elif message.voice:
            await bot.send_voice(user_id, voice=message.voice.file_id, caption=message.caption)
        elif message.sticker:
            await bot.send_sticker(user_id, sticker=message.sticker.file_id)
        elif message.animation:
            await bot.send_animation(user_id, animation=message.animation.file_id, caption=message.caption)
        else:
            logger.info(f"Unsupported content type {message.content_type} in thread {message.message_thread_id}")
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            return
        logger.info(f"Message sent to user {user_id} from thread {message.message_thread_id}")
    except TelegramBadRequest as e:
        logger.error(f"Error sending message to user {user_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–æ–∑–º–æ–∂–Ω–æ, –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.")
    except Exception as e:
        logger.error(f"Unexpected error sending message to user {user_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@router.message(F.chat.id == ADMIN_CHAT_ID, F.text.startswith("/close"))
async def admin_close_ticket_command(message: Message, state: FSMContext):
    """Handle ticket closure via /close command."""
    thread_id = message.message_thread_id
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    
    if not user_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        return

    try:
        try:
            topic_info = await bot.get_forum_topic_icon_stickers(chat_id=ADMIN_CHAT_ID)
            await bot.close_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        except TelegramBadRequest as e:
            if "TOPIC_DELETED" in str(e):
                logger.warning(f"Topic {thread_id} already deleted or closed.")
            else:
                raise e

        await bot.send_message(user_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
        await message.reply("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # Clear user's FSM state
        await state.clear()
    except TelegramBadRequest as e:
        logger.error(f"Error closing ticket {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")
    except Exception as e:
        logger.error(f"Unexpected error closing ticket {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –î–∏–∞–ª–æ–≥–∞.")

@router.message(F.chat.id == ADMIN_CHAT_ID, F.text.startswith("/approve"))
async def approve_address(message: Message, state: FSMContext):
    """Handle address approval via /approve command."""
    thread_id = message.message_thread_id
    user_id = await safe_redis_operation(redis_client.get, f"ticket:{thread_id}")
    
    if not user_id:
        await message.reply("‚ùå –î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫.")
        return

    try:
        try:
            topic_info = await bot.get_forum_topic_icon_stickers(chat_id=ADMIN_CHAT_ID)
            await bot.close_forum_topic(chat_id=ADMIN_CHAT_ID, message_thread_id=thread_id)
        except TelegramBadRequest as e:
            if "TOPIC_DELETED" in str(e):
                logger.warning(f"Topic {thread_id} already deleted or closed.")
            else:
                raise e

        await bot.send_message(user_id, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        await safe_redis_operation(redis_client.delete, f"ticket:{thread_id}")
        await message.reply("‚úÖ –ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –î–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        # Clear user's FSM state
        await state.clear()
    except TelegramBadRequest as e:
        logger.error(f"Error approving ticket {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")
    except Exception as e:
        logger.error(f"Unexpected error approving ticket {thread_id}: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞.")

@router.message(F.chat.id == ADMIN_CHAT_ID)
async def admin_non_thread_message(message: Message):
    """Handle admin messages sent outside forum threads."""
    logger.warning(
        f"Admin message outside thread: chat_id={message.chat.id}, "
        f"content_type={message.content_type}, text={message.text if message.text else 'None'}"
    )
    await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –î–∏–∞–ª–æ–≥.")

@router.message()
async def catch_all(message: Message):
    """Catch unhandled messages for debugging."""
    logger.warning(
        f"Unhandled message: chat_id={message.chat.id}, "
        f"thread_id={message.message_thread_id}, "
        f"content_type={message.content_type}, "
        f"text={message.text if message.text else 'None'}"
    )

@router.callback_query()
async def catch_all_callback(cb: CallbackQuery):
    """Catch unhandled callbacks for debugging."""
    logger.warning(
        f"Unhandled callback: chat_id={cb.message.chat.id}, "
        f"thread_id={cb.message.message_thread_id}, "
        f"data={cb.data}"
    )
    try:
        await cb.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    except TelegramBadRequest as e:
        logger.error(f"Error answering unhandled callback: {e}")